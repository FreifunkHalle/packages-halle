#!/bin/sh
# $Id: cgi-bin-botinfo.txt 1566 2008-02-14 14:24:42Z jow $
# edit botinfo.txt 2014-07-02 3dfxatwork $

echo Content-type: text/plain                                                                                 
echo "Encoding: UTF-8"
#echo "HTTP/1.1 200 OK"                                        
echo

. /lib/functions/network.sh
. /lib/functions.sh
. /usr/share/shlib-webif.sh

bot_usage() {
	cat<<EOF
Usage: ./cgi-bin-botinfo.txt?cat=<category>[,<category2>,<category3>,...]

possible categories are:
 neighbors
 nvram
 olsr
 routes
 uptime
 version
 wlan
 users
 
EOF

}

# read query string
webif_parse_urlquery

WLDEV=$(uci get botinfo.botinfo.wifidev)
if [[ "$WLDEV" == "" ]]
then
  uci set botinfo.botinfo.enabled=false
  uci commit
  /etc/init.d/botinfo boot
  WLDEV=$(uci get botinfo.botinfo.wifidev)
fi
output_cmd()
{
	echo "$1{"
	( eval $2 2>&1 ) | sed -e's/[\{\}]/\\&/g;s/^/	/g'
	echo '}'
}

bot_nvram() {
	ff_adm_nick=$(uci get freifunk.contact.nickname)
	wl0_channel=$(iwinfo $WLDEV info | grep Channel | cut -d ":" -f 3 | cut -d " " -f 2)
	wan_hostname=$(uci get system.@system[0].hostname)
	ff_release=$(cat /etc/openwrt_version )
	board=$(cat /tmp/sysinfo/model)
	ff_adm_mail=$(uci get freifunk.contact.mail)
	ff_adm_name=$(uci get freifunk.contact.name)
	ff_adm_latlon=$(uci get system.@system[0].latitude)
	ff_adm_latlon1=$(uci get system.@system[0].longitude)
	ff_adm_note=$(uci get freifunk.contact.note)
	ff_adm_loc=$(uci get system.@system[0].location)
	output_cmd 'nvram' 'echo "ff_adm_loc=$ff_adm_loc"; echo "boardtype=$board"; echo "ff_release=$ff_release"; echo "ff_adm_nick=$ff_adm_nick"; echo "ff_adm_mail=$ff_adm_mail"; echo "ff_adm_name=$ff_adm_name"; echo "ff_adm_note=$ff_adm_note"; echo "ff_adm_latlon=$ff_adm_latlon;$ff_adm_latlon1"; echo "wan_hostname=$wan_hostname"; echo "wl0_channel=$wl0_channel"' 
}

bot_neighbors() {
	# OLSR Neighbors
	if [ -x /usr/sbin/olsrd ]; then
		echo 'neighbors_olsr{'
		echo /neighbors | nc 127.0.0.1 9090
		echo '}'
	fi

	# default routes
	echo 'defaultroute{'

	ip route show exact 0/0 table all | while read line; do
			ifs="$IFS"; IFS=" "; set -- $line; IFS="$ifs"
			
			if [ "$1" = "default" -a "$2" = "via" ]; then
				echo "	$3	$5	$7"
			fi
	done
	
	echo '}'
}

bot_users() {
	DLEASES="/tmp/dhcp.leases"
	echo 'users{'
	if [ -f "$DLEASES" ]; then
		count=$(cat $DLEASES | wc -l)
		echo count=$count
	fi
	echo '}'
}

bot_wlan() {
	noise=$(iwinfo $WLDEV info | grep "Signal" | cut -d ":" -f 3 | cut -d " " -f 2)
	noise2=$(echo $noise | cut -d "-" -f2)
	rssi=$(iwinfo $WLDEV info | grep "Signal" | cut -d ":" -f 2 | cut -d " " -f 2)
	rssi2=$(echo $rssi | cut -d"-" -f2)
	txpwr=$(iwinfo $WLDEV info | grep Tx-Power | cut -d ":" -f 2 | cut -d " " -f 2)
	ssid=$(iwinfo $WLDEV info | grep ESSID | cut -d ":" -f 2 | cut -d " " -f 2)          
	mode=$(iwinfo $WLDEV info | grep Channel | cut -d ":" -f 2 | cut -d " " -f 2)    
	channel=$(iwinfo $WLDEV info | grep Channel | cut -d ":" -f 3 | cut -d " " -f 2)
	bssid=$(iwinfo $WLDEV info | grep "Access Point" | cut -d " " -f 13)
	rate=$(iwinfo $WLDEV info | grep "Rate" | cut -d ":" -f 2 | cut -d " " -f 2)
	
	txpwr2=$(($txpwr / 10))
	tx=$(pow 10 $txpwr2 | awk '{printf("%d\n",$1 + 0.5)}')
	
	output_cmd 'wlan_rate' 'echo "rate is $rate Mbps"'
	output_cmd 'wlan_mrate' 'echo "mrate is $rate Mbps"'
	output_cmd 'wlan_rssi' 'echo "rssi is $rssi"'
	output_cmd 'wlan_noise' 'echo "noise is $noise"'
	output_cmd 'wlan_txpower' 'echo "txpwr is $tx"'
	output_cmd 'wlan_status' 'echo "SSID: $ssid"; echo -e "Mode: $mode\tRSSI: $rssi2 dBm\tnoise: $noise2 dBm\tChannel: $channel"; echo "BSSID: $bssid"'
}
pow() #@ USAGE: pow base exponent
{
   echo $(( ${1:?} ** ${2:?} ))
}

bot_version() {
	version=$(cat /etc/banner | sed -n '7p' )
	output_cmd 'version' 'echo "$version"'
}

bot_uptime() {
	output_cmd 'uptime' 'uptime'
}

bot_routes() {
	output_cmd 'routes' 'ip route'
}

bot_olsr() {
	echo 'olsr{'
                echo / | nc 127.0.0.1 9090
        echo '}'
}

cat=$(echo $QUERY_STRING | cut -d "=" -f 2)

test -z $cat && bot_usage
for cat in $(echo $cat | sed 's/,/ /g'); do
	case $cat in
		neighbors)
		bot_neighbors
		;;
		routes)
		bot_routes
		;;
		users)
		bot_users
		;;
		uptime)
		bot_uptime
		;;
		version)
		bot_version
		;;
		wlan)
		bot_wlan
		;;
		nvram)
		bot_nvram
		;;
		olsr)
		bot_olsr
		;;
		*)
		echo -e "not implemented: $cat\n"
		bot_usage
		;;
	esac
done
